A few notes about using betas and "wishes" to beta-testes

1. Any beta will "yaff" after ~3 month it has expired.
   Just for reminder testing obsolete builds do more harm than good,
   don't forget to update UmiLink and test newest builds.

2. Latest builds lay on ftp://ftp.styx.cabel.net/pub/UniLink/ulnbXXXX.zip.
   To subscribe on the newsletter send a mail to
   updater@styx.cabel.net with subj: "SUBSCRIBE ulink-beta"
   (newsletter includes related products announcements, like WinDos32).

3. "features requests" is acceptable, but without any guarantees to take them 
   up, meanwhile, bug reports are welcome, always.

N.B. duration of the building new lib at first usage isn't testimonial,
     there is preproduction costs (hash-generation, for example),
     so do not haste to report me about :) 

Bug-reports:
  Send reports to ulink@styx.cabel.net;
  Bug description has to include 3 absolute necessarily things:
    1. reproducibility (singe-shot isn't bug :-)
    2. type and version OS the bug appears;
    3. compiler(s) generated buggy objs (and libs)
    4. a few words about bug itself :)

  IF bug is reproductive (and this is not grammatical mistake in the diagnostic 
  message :), it is desirable to keep the very objs-set for a while - if bug 
  reproduce will not be succeed, it would very kindly to pack this set and 
  send the archive to ulink@styx.cabel.net or upload to 
  ftp://ftp.styx.cabel.net/pub/UniLink/uploads, don't forget about rsp.

Recommendations:
  Primary action is:

    1. Use UniLink with different compilers (/RTL) of the different versions,
       especially old ones or exotic.
    2. "team-linking" vc/bc/gcc/... especially "mixed" linking bc/vc with 
       TLS/TLScallbacks.
    3. "odds" file names/paths (national encoding, "non-printable" chars, ect),
       the greatest interest is how it works with "real" mbcs (something like 
       japanese 73 chars kana).
    4. How it handles resourcestring for langs with "real" mbcs (thai, kanj, 
       etc).
    5. How it handles bcc-packages under complicated structure cross references
       having deadlocks, recursions and other errors like that.
    6. How ilink32 handles pkgs LIBS, generated by ulink (both static and 
       dynamic)
    NOTE: Keep differences in mind while testing.
    7. How it works in new environment and if dozen simultaneous instances of 
       ulink work.
